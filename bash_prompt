. ./.bash_colors

function git_prompt_command() {
  git_status="$(git -c color.status=false status --short --branch 2> /dev/null)"
  if [[ $? != 0 ]] ; then
    return
  fi

  # Note that the pattern is actually (e.g.) "## master...origin/master [ahead 1]"
  branch_pattern="^## ([^${IFS}]*)"

  if [[ ${git_status} =~ ${branch_pattern} ]]; then
    branch=${BASH_REMATCH[1]}
  fi

  # Parse the file details.
  # Each line is "XY filename", where X denotes the index status, and Y the working status.
  # TODO: It also allows for renames, but I'm not going to bother with those yet.
  file_pattern="^([^#])(.) (.*)$"
  
  dirty=0

  index_added=()
  index_modified=()
  index_deleted=()
  index_unmerged=()

  working_added=()
  working_modified=()
  working_deleted=()
  working_unmerged=()

  while IFS= read -r line; do
    if [[ $line =~ $file_pattern ]]; then
      # Extract the matches.
      index_status=${BASH_REMATCH[1]}
      working_status=${BASH_REMATCH[2]}
      file_path=${BASH_REMATCH[3]}

      case $index_status in
        A) index_added+=(file_path) ;;
        M) index_modified+=(file_path) ;;
        R) index_modified+=(file_path) ;;
        C) index_modified+=(file_path) ;;
        D) index_deleted+=(file_path) ;;
        U) index_unmerged+=(file_path) ;;
        *) ;;
      esac

      case $working_status in
        \?) working_added+=(file_path) ;;
        A) working_added+=(file_path) ;;
        M) working_modified+=(file_path) ;;
        D) working_deleted+=(file_path) ;;
        U) working_unmerged+=(file_path) ;;
        *) ;;
      esac

      dirty=1
    fi
  done <<< "$git_status"

  echo -n " ${IWhite}["

  # TODO: The colour should be based on whether we're ahead of or behind the remote.
  if [[ $dirty == 0 ]]; then
    echo -n "${IBlue}"
  else
    echo -n "${IRed}"
  fi

  echo -n "${branch}"

  # Display index stats:
  echo -n "${IGreen}"
  echo -n " +${#index_added[*]}"
  echo -n " ~${#index_modified[*]}"
  echo -n " -${#index_deleted[*]}"
  echo -n " !${#index_unmerged[*]}"

  echo -n "${IWhite} |"

  # Display working stats:
  echo -n "${IRed}"
  echo -n " +${#working_added[*]}"
  echo -n " ~${#working_modified[*]}"
  echo -n " -${#working_deleted[*]}"
  echo -n " !${#working_unmerged[*]}"

  echo -n "${IWhite}] "
  echo -n "${Color_Off}"
}

function prompt_command() {
  git_prompt="$(git_prompt_command)"

  PS1="${debian_chroot:+($debian_chroot)}"
  PS1+="${IYellow}\u@\h${ICyan}:\w${git_prompt}${ICyan}\$ $Color_Off"

  # Also update the terminal title bar.
  Title="${debian_chroot:+($debian_chroot)}"
  Title+="\u@\h:\w"

  case "$TERM" in
    xterm*|rxvt*)
    PS1="\[\e]0;$Title\a\]$PS1"
    ;;
  *)
    ;;
  esac

  export PS1
}

export PROMPT_COMMAND=prompt_command

# vim: syntax=sh
