DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
. $DIR/.bash_colors

# If you're logged in as this person, we don't bother showing it in the title bar.
# This is all in the goal of shortening the title in the task bar.
HOME_USER=roger

# Prefix colours u@h:
PromptColor_User="$IYellow"
PromptColor_At="$IYellow"
PromptColor_Host="$IYellow"
PromptColor_WorkingDir="$ICyan"

# Git colours [branch +3 ~2]
PromptColor_Git="$IWhite"
PromptColor_BranchAhead="$IGreen"
PromptColor_BranchBehind="$IRed"
PromptColor_BranchBoth="$IYellow"
PromptColor_BranchNeither="$IBlue"
PromptColor_IndexStats="$IGreen"
PromptColor_WorkingStats="$IRed"

# Suffix colours $ or #
PromptColor_Dollar="$ICyan"

# If root, then make it a bit lairy.
if [[ $UID == 0 ]]; then
  PromptColor_User="$IRed"
  PromptColor_At="$IRed"
  PromptColor_Host="$IRed"
  PromptColor_WorkingDir="$IYellow"
  PromptColor_Dollar="$IRed"
fi

function git_prompt_command() {
  git_status="$(git -c color.status=false status --short --branch 2> /dev/null)"
  if [[ $? != 0 ]] ; then
    return
  fi

  # Note that the pattern is actually (e.g.) "## master...origin/master [ahead 1]"
  initial_branch_pattern="^## Initial commit on ([^${IFS}]*)"
  normal_branch_pattern1="^## ([^${IFS}]*)"
  normal_branch_pattern2="^## (.*)\.\.\.([^${IFS}]*)"
  ahead_branch_pattern="^## (.*)\.\.\.([^${IFS}]*) \[ahead (.*)\]"
  behind_branch_pattern="^## (.*)\.\.\.([^${IFS}]*) \[behind (.*)\]"
  ahead_behind_branch_pattern="^## (.*)\.\.\.([^${IFS}]*) \[ahead (.*), behind (.*)\]"
  gone_branch_pattern="^## (.*)\.\.\.([^${IFS}]*) \[gone]"
 
  ahead=0
  behind=0
 
  if [[ ${git_status} =~ ${normal_branch_pattern1} ]]; then
    branch=${BASH_REMATCH[1]}
  fi
  if [[ ${git_status} =~ ${normal_branch_pattern2} ]]; then
    branch=${BASH_REMATCH[1]}
  fi
  if [[ ${git_status} =~ ${initial_branch_pattern} ]]; then
    branch=${BASH_REMATCH[1]}
  fi
  if [[ ${git_status} =~ ${gone_branch_pattern} ]]; then
    branch=${BASH_REMATCH[1]}
  fi
  if [[ ${git_status} =~ ${ahead_branch_pattern} ]]; then
    branch=${BASH_REMATCH[1]}
    ahead=${BASH_REMATCH[3]}
  fi  
  if [[ ${git_status} =~ ${behind_branch_pattern} ]]; then
    branch=${BASH_REMATCH[1]}
    behind=${BASH_REMATCH[3]}
  fi
  if [[ ${git_status} =~ ${ahead_behind_branch_pattern} ]]; then
    branch=${BASH_REMATCH[1]}
    ahead=${BASH_REMATCH[3]}
    behind=${BASH_REMATCH[4]}
  fi

  # Parse the file details.
  # Each line is "XY filename", where X denotes the index status, and Y the working status.
  file_pattern="^([^#])(.) (.*)$"
  
  dirty=0

  index_added=()
  index_modified=()
  index_deleted=()
  index_unmerged=()

  working_unknown=()
  working_added=()
  working_modified=()
  working_deleted=()
  working_unmerged=()

  while IFS= read -r line; do
    if [[ $line =~ $file_pattern ]]; then
      # Extract the matches.
      index_status=${BASH_REMATCH[1]}
      working_status=${BASH_REMATCH[2]}
      file_path=${BASH_REMATCH[3]}

      case $index_status in
        A) index_added+=(file_path) ;;
        M) index_modified+=(file_path) ;;
        R) index_modified+=(file_path) ;;
        C) index_modified+=(file_path) ;;
        D) index_deleted+=(file_path) ;;
        U) index_unmerged+=(file_path) ;;
        *) ;;
      esac

      case $working_status in
        \?) working_unknown+=(file_path) ;;
        A) working_added+=(file_path) ;;
        M) working_modified+=(file_path) ;;
        D) working_deleted+=(file_path) ;;
        U) working_unmerged+=(file_path) ;;
        *) ;;
      esac

      dirty=1
    fi
  done <<< "$git_status"

  echo -n " ${PromptColor_Git}["

  # The colour should be based on whether we're ahead of or behind the remote.
  if [[ $ahead != 0 && $behind != 0 ]]; then
    echo -n "${PromptColor_BranchBoth}"
  elif [[ $ahead != 0 ]]; then
    echo -n "${PromptColor_BranchAhead}"
  elif [[ $behind != 0 ]]; then
    echo -n "${PromptColor_BranchBehind}"
  else
    echo -n "${PromptColor_BranchNeither}"
  fi

  echo -n "${branch}"

  # Display index stats:
  echo -n "${PromptColor_IndexStats}"
  if [[ ${#index_added[*]} != 0 ]]; then
    echo -n " +${#index_added[*]}"
  fi
  
  if [[ ${#index_modified[*]} != 0 ]]; then
    echo -n " ~${#index_modified[*]}"
  fi
  if [[ ${#index_deleted[*]} != 0 ]]; then
    echo -n " -${#index_deleted[*]}"
  fi
  if [[ ${#index_unmerged[*]} != 0 ]]; then
    echo -n " !${#index_unmerged[*]}"
  fi

  # Display working stats:
  echo -n "${PromptColor_WorkingStats}"
  if [[ ${#working_unknown[*]} != 0 ]]; then
    echo -n " ?${#working_unknown[*]}"
  fi
  if [[ ${#working_added[*]} != 0 ]]; then
    echo -n " +${#working_added[*]}"
  fi
  if [[ ${#working_modified[*]} != 0 ]]; then
    echo -n " ~${#working_modified[*]}"
  fi
  if [[ ${#working_deleted[*]} != 0 ]]; then
    echo -n " -${#working_deleted[*]}"
  fi
  if [[ ${#working_unmerged[*]} != 0 ]]; then
    echo -n " !${#working_unmerged[*]}"
  fi

  echo -n "${PromptColor_Git}] "
  echo -n "${Color_Off}"
}

function prompt_command() {
  git_prompt="$(git_prompt_command)"

  if [[ ${SERVER_ID} != '' ]]; then
    Prompt_Host="$SERVER_ID"
  else
    Prompt_Host="\h"
  fi

  # debian_chroot stuff.
  PS1="${debian_chroot:+($debian_chroot)}"
  # roger@host:~/cwd
  PS1+="${PromptColor_User}\u"
  PS1+="${PromptColor_At}@"
  PS1+="${PromptColor_Host}"
  PS1+="${Prompt_Host}"
  PS1+="${PromptColor_WorkingDir}:\w"

  # [git stuff]
  PS1+="${git_prompt}"
  # $ suffix.
  PS1+="${PromptColor_Dollar}\\$"
  PS1+="$Color_Off"
  PS1+=" "

  # Also update the terminal title bar.
  Title="${debian_chroot:+($debian_chroot)}"
  # If user name == roger, don't bother including it.
  if [[ $USER != $HOME_USER ]]; then
    Title+="\u@"
  fi
  # If host == roger-p5q, (not remote) don't bother including it.
  if [[ $SSH_TTY != '' ]]; then
      Title_Host="\h"
  fi
  # SSH_TTY isn't set when sudo on a remote host. Try SERVER_ID.
  if [[ $SERVER_ID != '' ]]; then
      Title_Host="$SERVER_ID"
  fi
  if [[ $Title_Host != '' ]]; then
    Title+="${Title_Host}:"
  fi
  Title+="\w"

  case "$TERM" in
    xterm*|rxvt*)
      PS1="\[\e]0;$Title\a\]$PS1"
    ;;
  *)
    ;;
  esac

  export PS1
}

export PROMPT_COMMAND=prompt_command

show_command_in_title_bar()
{
  case "$BASH_COMMAND" in
    *\033]0*)
      # The command is trying to set the title bar,
      # probably due to $PROMPT_COMMAND above.
      # Skip it.
      ;;
    *)
      echo -ne "\e]0;${BASH_COMMAND}\007"
      ;;
  esac
}

case "$TERM" in
  xterm*|rxvt*)
    trap show_command_in_title_bar DEBUG
    ;;
  *)
    ;;
esac

# vim: syntax=sh: filetype=sh
